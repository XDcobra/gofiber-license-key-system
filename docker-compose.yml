services:
  app:
    build:
      context: ./services/api_gateway
      dockerfile: ./Dockerfile
    env_file:
      - .env
    container_name: api_gateway
    hostname: api_gateway
    networks:
      redis-network:
        aliases:
          - api_gateway
    links:
      - redis
      - redis-slave
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    depends_on:
      - redis
      - redis-slave
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    ports:
      - "8000:8000"
    labels:
      kompose.service.type: loadbalancer

  redis:
    image: "bitnami/redis:latest"
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - REDIS_AOF_ENABLED=no
    networks:
      redis-network:
        aliases:
          - redis
    volumes:
      - redis-data:/bitnami/redis/data
    ports:
      - "6379:6379"

  redis-slave:
    image: "bitnami/redis:latest"
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_AOF_ENABLED=no
    ports:
      - "6379"
    depends_on:
      - redis
    networks:
      redis-network:
        aliases:
          - redis-slave

  redis-sentinel-1:
    image: "bitnami/redis-sentinel:latest"
    hostname: redis-sentinel-1
    container_name: redis-sentinel-1
    environment:
      - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_AOF_ENABLED=no
    depends_on:
      - redis
      - redis-slave
    ports:
      - "26379:26379"
    networks:
      redis-network:
        aliases:
          - redis-sentinel-1

  redis-sentinel-2:
    image: "bitnami/redis-sentinel:latest"
    hostname: redis-sentinel-2
    container_name: redis-sentinel-2
    environment:
      - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_AOF_ENABLED=no
    depends_on:
      - redis
      - redis-slave
      - redis-sentinel-1
    ports:
      - "26380:26380"
    networks:
      redis-network:
        aliases:
          - redis-sentinel-2

  redis-sentinel-3:
    image: "bitnami/redis-sentinel:latest"
    hostname: redis-sentinel-3
    container_name: redis-sentinel-3
    environment:
      - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_AOF_ENABLED=no
    depends_on:
      - redis
      - redis-slave
      - redis-sentinel-1
      - redis-sentinel-2
    ports:
      - "26381:26381"
    networks:
      redis-network:
        aliases:
          - redis-sentinel-3

  redis-insight:
    image: "redislabs/redisinsight:latest"
    container_name: redis-insight
    hostname: redis-insight
    networks:
      redis-network:
        aliases:
          - redis-insight
    volumes:
      - redis-insight-data:/db
    depends_on:
      - redis
      - redis-slave
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    ports:
      - "5540:5540"

  prometheus:
    build:
      context: ./services/prometheus
      dockerfile: ./Dockerfile
      args:
        METRICS_USER: ${METRICS_USER}
        METRICS_PASS: ${METRICS_PASS}
        PROM_USER: ${PROM_USER}
        PROM_PASS: ${PROM_PASS}
    container_name: prometheus
    hostname: prometheus
    command: "--config.file=/etc/prometheus/prometheus.yml --web.config.file=/etc/prometheus/web.yml"
    restart: unless-stopped
    volumes:
      - prom-data:/prometheus
    networks:
      redis-network:
        aliases:
          - prometheus
    links:
      - app
    depends_on:
      - app
    ports:
      - "9090:9090"

  grafana:
    build:
      context: ./services/grafana
      dockerfile: ./Dockerfile
      args:
        PROM_USER: ${PROM_USER}
        PROM_PASS: ${PROM_PASS}
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      redis-network:
        aliases:
          - grafana
    links:
      - redis
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
      - prometheus
      - app
    depends_on:
      - prometheus
    ports:
      - "3000:3000"

  mysql:
    image: "mysql:latest"
    container_name: mysql
    env_file:
      - .env
    volumes:
      - ./services/mysql/init.sql:/docker-entrypoint-initdb.d/db.sql
      - mysql-data:/var/lib/mysql
    networks:
      redis-network:
        aliases:
          - mysql
    links:
      - app
    depends_on:
      - app
    ports:
      - "3306:3306"

volumes:
  redis-insight-data:
  redis-data:
  prom-data:
  grafana-data:
  mysql-data:

networks:
  redis-network:
    driver: bridge

